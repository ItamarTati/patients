{"version":3,"sources":["components/loading/Loading.module.css","pages/home/Home.module.css","components/container/Container.tsx","components/loading/Loading.tsx","components/table/Table.tsx","pages/home/Home.tsx","pages/not-found/notFound.tsx","pages/physician/Physician.tsx","pages/visits/Visits.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Container","Loading","className","classes","Loader","Table","useState","patients","setPatients","loading","setLoading","ferrumPatientsAPI","useEffect","fetch","then","response","json","data","catch","error","console","log","map","patient","id","firstName","lastName","email","address","phone","since","to","Home","Header","notFound","Physician","useParams","physician","setPhysician","requestWorked","setRequestWorked","physicianInfoApi","Physicianid","Visits","visits","setVisits","ferrumVisitssAPI","Patientid","visit","patientId","physicianId","time","location","symptoms","diagnosis","withRouter","exact","path","component","NotFound","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e5b1cc3b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loading\":\"Loading_Loading__1PTXA\",\"Loader\":\"Loading_Loader__XJmFL\",\"spin\":\"Loading_spin__2hZwy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Home_Header__3_kxF\"};","import React from 'react'\n\nconst Container: React.FC = () => {\n    return (\n    <div >\n        <p>People</p>\n\n    </div>)\n}\nexport default Container","import React from 'react';\nimport classes from './Loading.module.css';\n\nconst  Loading: React.FC = () => {\n    return (\n        <div className={classes.Loading}>\n            <div className={classes.Loader} />\n            <p>Jusr Wait a Short Amount</p>\n        </div>\n    )\n}\n\nexport default Loading","import React, { useState, useEffect } from 'react';\nimport Container from '../container/Container';\nimport { Link } from 'react-router-dom';\nimport Loading from '../../components/loading/Loading';\n\ninterface Patient{\n    id: string,\n    firstName: string,\n    lastName: string,\n    email: string,\n    address: string,\n    phone: string,\n    since: string\n}\nconst Table: React.FC = () => {\n    const [patients, setPatients] = useState<Patient[]>([]),\n    [loading, setLoading] =  useState<boolean>(true), \n    ferrumPatientsAPI: string = 'https://us-central1-ferrum-dev.cloudfunctions.net/api/v1/patients'\n    \n    useEffect(() => {\n        fetch(ferrumPatientsAPI)\n        .then(response => response.json())\n        .then(data => setPatients(data))\n        .then(data => setLoading(false))\n        .catch((error) => console.log(error));\n      }, [ferrumPatientsAPI])\n\n      if(loading === true){  \n        return <Loading />\n      }\n      else{\n    return (\n    <div >\n        <h2>List of Users</h2>\n        {patients.map((patient) => \n        <div>\n        <p key = {patient.id}>{patient.id}, {patient.firstName}, {patient.lastName}, \n        {patient.email}, {patient.address}, {patient.phone}, {patient.since} </p>\n        <p><Link to={`/patients/${patient.id}`}>Look at visits</Link></p>\n        </div>\n        )}\n        <Container/>\n    </div>)}\n}\nexport default Table","import React from 'react';\nimport Table from '../../components/table/Table';\nimport classes from './Home.module.css';\n\n\nconst Home: React.FC = () => {\n    return (\n    <div >\n      <div className={classes.Header}>\n          <h2>Welcome to </h2>\n          <h3>Because behind every scan is a person. </h3>\n      </div>\n        <Table/>\n    \n\n    </div>)\n  }\n\nexport default Home","import React from 'react';\n\n\nconst notFound: React.FC = () => {\n    return (\n    <div >\n        <h1>Page not found</h1>\n\n    </div>)\n  }\n\nexport default notFound","import React, { useState, useEffect } from 'react';\nimport { useParams, Redirect } from 'react-router-dom';\nimport Loading from '../../components/loading/Loading'\n\ninterface PhysicianInfo{  \n    id: string\n    firstName: string,\n    lastName: string,\n    phone: string\n}\ninterface id{\n  Physicianid: string\n}\n\nconst Physician: React.FC = () => {\n  const id: id = useParams()\n  const [physician, setPhysician] = useState<Partial<PhysicianInfo>>({}),\n  [loading, setLoading] =  useState<boolean>(true),\n  [requestWorked, setRequestWorked] =  useState<boolean>(true), \n  physicianInfoApi: string = `https://us-central1-ferrum-dev.cloudfunctions.net/api/v1/physicians/${id.Physicianid}`\n  useEffect(() => {\n    fetch(physicianInfoApi)\n        .then(response => response.json())\n        .then(data => setPhysician(data))\n        .then(data => setLoading(false))\n        .catch((error) => setRequestWorked(false));\n  }, [physicianInfoApi]);\n  if(requestWorked === false){\n    return <Redirect to='/patients/not-found' />\n  } else{\n    if(loading === true){  \n      return <Loading />\n    }\n    else{\n  return (\n    <div key = {physician.id}>\n        <h1>Physician Page</h1>\n        <p>{physician.id}, {physician.firstName}, {physician.lastName}, {physician.phone}</p>\n\n    </div>)}\n  }}\n\nexport default Physician","import React, { useState, useEffect } from 'react';\nimport { Link, useParams, Redirect } from 'react-router-dom';\nimport Loading from '../../components/loading/Loading'\ninterface Visit{  \n    id: string,\n    patientId: string,\n    physicianId: string,\n    time: string,\n    location: string,\n    symptoms: string,\n    diagnosis: string\n}\ninterface id{\n  Patientid: string\n}\n\nconst Visits: React.FC = () => {\n  const id: id = useParams()\n  const [visits, setVisits] = useState<Visit[]>([]),\n  [loading, setLoading] =  useState<boolean>(true),\n  [requestWorked, setRequestWorked] =  useState<boolean>(true),\n  ferrumVisitssAPI: string = `https://us-central1-ferrum-dev.cloudfunctions.net/api/v1/patients/${id.Patientid}/visits`\n    \n  useEffect(() => {\n    fetch(ferrumVisitssAPI)\n    .then(response => response.json())\n    .then(data => setVisits(data))\n    .then(data => setLoading(false))\n    .catch((error) => setRequestWorked(false));\n    }, [ferrumVisitssAPI])\n\n    if(requestWorked === false){\n      return <Redirect to='/patients/not-found' />\n    } else{\n      if(loading === true){  \n        return <Loading />\n      }\n      else{\n    return (\n    <div >\n        <h1>Visits Page</h1>        \n        {\n        visits.map((visit) => \n        <div key={visit.id}>\n        <p >{visit.id}, {visit.patientId}, {visit.physicianId}, \n        {visit.time}, {visit.location}, {visit.symptoms}, {visit.diagnosis} </p>\n        <p><Link to={`/patients/physicians/${visit.physicianId}`}>Look at phycisian</Link></p>\n        </div> \n        )}\n    </div>)}\n    }\n  }\n\nexport default Visits","import React from 'react';\nimport {Switch, Route, withRouter} from 'react-router-dom';\nimport Home from './pages/home/Home';\nimport NotFound from './pages/not-found/notFound';\nimport Physician from './pages/physician/Physician';\nimport Visits from './pages/visits/Visits';\nimport './App.css';\n\nconst App: React.FC = () => {\n  return (\n  <div className='App'>\n    <Switch>\n      <Route exact path='/patients' component={Home} />\n      <Route exact path='/patients/not-found' component={NotFound} />\n      <Route exact path='/patients/:Patientid' component={Visits} />\n      <Route exact path='/patients/physicians/:Physicianid' component={Physician} />\n    </Switch>\n  </div>)\n}\n\nexport default withRouter(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {BrowserRouter as Router} from 'react-router-dom'\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}